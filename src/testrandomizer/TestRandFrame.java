/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package testrandomizer;
import java.awt.FileDialog;
import java.awt.Desktop;
import java.util.Scanner;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.*;

/**
 *
 * @author Mike
 */
public class TestRandFrame extends javax.swing.JFrame {

    /**
     * Creates new form TestRandFrame
     */
    public TestRandFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        numVersionsBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        outputTextField = new javax.swing.JTextField();
        openFilesAfterCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input file");

        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        goButton.setText("Randomize Questions");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Number of test versions");

        numVersionsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        numVersionsBox.setSelectedIndex(1);

        jLabel3.setText("Output");

        outputTextField.setText("TestVersion");

        openFilesAfterCheckBox.setSelected(true);
        openFilesAfterCheckBox.setText("Open output files upon completion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openFilesAfterCheckBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(numVersionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(browseButton))
                        .addComponent(goButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(outputTextField))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numVersionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(goButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openFilesAfterCheckBox)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        go();
    }//GEN-LAST:event_inputTextFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        FileDialog fd = new java.awt.FileDialog(this, "Choose a file...", FileDialog.LOAD);
        fd.setDirectory("C:\\");
        fd.setFile("*.txt");
        fd.setVisible(true);
        String targetFile = fd.getFile();
        if (fd.getFile() != null) {
            String targetDir = fd.getDirectory();
            inputTextField.setText(targetDir+targetFile);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        go();
    }//GEN-LAST:event_goButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestRandFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestRandFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestRandFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestRandFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestRandFrame().setVisible(true);
            }
        });
    }
    
    public void go() {
        try {
            String filePath = inputTextField.getText();
            File f = new File(filePath);
            TestSection questions = readFileAndMakeQuestions(f);
            
            List<File> outFiles = writeOutput(questions, f);
            if (openFilesAfterCheckBox.isSelected()) {
                for (File file : outFiles) {
                    try {
                        Desktop.getDesktop().open(file);
                    } catch (IOException ex) {
                        Logger.getLogger(TestRandFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(TestRandFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("File not found. "+inputTextField.getText());
        }
    }
    
    public TestSection readFileAndMakeQuestions(File f) throws FileNotFoundException {
        Scanner sc = new Scanner(f, "latin1");
        TestSection questions = parseSection(sc);
        return questions;
    }
    
    public TestSection parseSection(Scanner sc) {
        TestSection returnMe = new TestSection();
        while (sc.hasNext() && sc.hasNextLine()) {
            String n = sc.next().toLowerCase();
            switch (n) {
                case "}":
                    return returnMe;
                case "{":
                    returnMe.add(parseSection(sc));
                    break;
                case "q:":
                    String q = sc.nextLine().trim();
                    returnMe.add(new Question(q));
                    break;
                case "a:":
                    if (returnMe.isEmpty()) {
                        System.out.println("Can't parse line, a: needs to be nested beneath a q:");
                    } else {
                        String a = sc.nextLine().trim();
                        returnMe.get(returnMe.size()-1).appendAnswer(a);
                    }
                    break;
                default:
                    if (sc.hasNextLine()) {
                        sc.nextLine();
                    }
                    System.out.println("Line wasn't empty, or didn't start with q: or a:");
                    
            }
        }
        System.out.println("Never saw a }");
        return returnMe;
    }
    
    public List<File> writeOutput(TestSection questions, File f) {
        List<File> outputFiles = new ArrayList<>();
        for (int i = 0; i <= numVersionsBox.getSelectedIndex(); i++) {
            questions.shuffle();
            int questionNumber = 1;
            String toFile = questions.writeOut(questionNumber);

            Writer writer = null;
            try {
                String outFileName = outputTextField.getText()+(i+1)+".txt";
                String outFilePath = f.getParent()+"\\"+outFileName;
                writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(outFilePath), "ISO-8859-1"));
                writer.write(toFile);
                outputFiles.add(new File(outFilePath));
            } catch (IOException ex) {
                System.out.println("Caught IOException");
            } finally {
               try {writer.close();} catch (IOException ex) {}
            }
        }
        return outputFiles;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton goButton;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox numVersionsBox;
    private javax.swing.JCheckBox openFilesAfterCheckBox;
    private javax.swing.JTextField outputTextField;
    // End of variables declaration//GEN-END:variables
}
